function setupScene(e){const n=new THREE.Scene,o=new THREE.OrthographicCamera(-1,1,1,-1,.1,1e3),t=new THREE.WebGLRenderer({antialias:!0,alpha:!0,clearColor:e});t.setPixelRatio(window.devicePixelRatio||1),Object.assign(t.domElement.style,{position:"fixed",top:"0",left:"0",width:"100%",height:"100lvh",zIndex:"-1",opacity:"0.01",pointerEvents:"none"}),document.body.appendChild(t.domElement);const r=()=>{const e=t.domElement.clientWidth,n=t.domElement.getBoundingClientRect().height;t.setSize(e,n,!1)};return r(),t.__setRendererSizeToCSS=r,{scene:n,camera:o,renderer:t}}function animateCanvas(){const e=document.querySelector("canvas");e&&gsap.fromTo(e,{opacity:.01,scale:1.3},{opacity:.8,scale:1,duration:3,ease:"power2.out",delay:1,overwrite:!0})}function createShaderMaterial(e,n){return new THREE.ShaderMaterial({uniforms:{time:{value:Date.now()/1e3%3600},timeSpeed:{value:.05},primaryColor:{value:e},secondaryColor:{value:n},scale:{value:.3},speed:{value:.2},speedX:{value:.2},thresholdStart:{value:.5},thresholdEnd:{value:.8},smoothnessAlpha:{value:.001},smoothnessColor:{value:.35},speedY:{value:.002},scrollY:{value:0},heartbeat:{value:0}},vertexShader:vertexShader,fragmentShader:fragmentShader,transparent:!0})}class Heartbeat{constructor(e=30,n=.15,o=.5,t=.15){this.bpm=e,this.pulseStrength=n,this.pulseDuration=o,this.lubDubGap=t,this.lastBeatTime=0,this.startTime=performance.now()}getValue(){const e=performance.now(),n=(e-this.startTime)/1e3,o=60/this.bpm,t=n%o;t<.05&&n-this.lastBeatTime>.05&&(this.lastBeatTime=n);const r=n-this.lastBeatTime,a=r-this.lubDubGap,i=r<this.pulseDuration?this.pulseStrength*Math.exp(-5*r/this.pulseDuration):0,s=a>0&&a<this.pulseDuration?.7*this.pulseStrength*Math.exp(-5*a/this.pulseDuration):0;return i+s}}window.addEventListener("DOMContentLoaded",()=>{function e(e){window.scrollY+window.innerHeight>=document.body.scrollHeight||window.scrollY<=0||(u=Math.max(-S,Math.min(S,Math.abs(e))),clearTimeout(y),y=setTimeout(()=>{u=0},100))}function n(e){if(!d&&(h=requestAnimationFrame(n),v)){const n=(e-p)/1e3;p=e,l.uniforms.time.value+=n,x=THREE.MathUtils.lerp(x,u,n*(0==u?f:w)),x<1e-4&&(x=0),l.uniforms.scrollY.value+=x,l.uniforms.heartbeat.value=C.getValue(),s.render(a,i)}}const o=new THREE.Color(themePrimaryColor),t=new THREE.Color(themeSecondaryColor),r=new THREE.Color(themeBackgroundColor),{scene:a,camera:i,renderer:s}=setupScene(r),l=createShaderMaterial(o,t),c=new THREE.PlaneGeometry(2,2),m=new THREE.Mesh(c,l);a.add(m);let v=!0,d=!1,h=null,p=performance.now(),u=0,x=0,y=null,f=1,w=5,S=10;window.lenis&&"function"==typeof lenis.on&&lenis.on("virtual-scroll",({deltaY:n})=>e(n)),document.addEventListener("visibilitychange",()=>{document.hidden?cancelAnimationFrame(h):(p=performance.now(),h=requestAnimationFrame(n))}),window.addEventListener("resize",()=>{s&&s.__setRendererSizeToCSS&&s.__setRendererSizeToCSS()});const C=new Heartbeat;h=requestAnimationFrame(n),animateCanvas()});const snoise3D="\n//\n// Description : Simplex 3D Noise\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     License : MIT\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nfloat snoise(vec3 v) {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n  \n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 = v - i + dot(i, C.xxx) ;\n  \n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  \n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n  \n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n  \n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n  \n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  // mod(p,7*7)\n  \n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n  \n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n  \n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  \n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n  \n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n  \n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  \n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  \n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), \n                          dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n",vertexShader="\n  varying vec2 vUv;\n  varying vec3 vPosition;\n\n  void main() {\n    vUv = uv;\n    vPosition = position;\n\n    gl_Position = vec4(position, 1.0);\n  }\n",fragmentShader=`\nprecision highp float;\n\nvarying vec3 vPosition;\n\nuniform float time;\nuniform float timeSpeed;\nuniform float scale;\nuniform float speed;\nuniform float speedX;\nuniform float scrollY;\n\nuniform float thresholdStart;\nuniform float thresholdEnd;\n\nuniform float smoothnessAlpha;\nuniform float smoothnessColor;\n\nuniform vec3 secondaryColor;\nuniform vec3 primaryColor;\nuniform float heartbeat;  // heartbeat modulation uniform\n\n${snoise3D}\n\nvoid main() {\n  vec3 np = vPosition * scale;\n  np.z += time * timeSpeed * speed + scrollY * 0.1;\n  float n = snoise(np);\n  float t = n * 0.5 + 0.5;\n\n  float alpha = smoothstep(\n    thresholdStart - smoothnessAlpha - heartbeat * 0.01,\n    thresholdStart + smoothnessAlpha,\n    t\n  );\n\n  float mixSP = smoothstep(\n    thresholdEnd - smoothnessColor - heartbeat * 0.1,\n    thresholdEnd + smoothnessColor,\n    t\n  );\n\n  vec3 col = mix(secondaryColor, primaryColor, mixSP);\n  // apply heartbeat push towards primaryColor\n  // col = mix(col, primaryColor, );\n\n  gl_FragColor = vec4(col, alpha);\n}\n`;